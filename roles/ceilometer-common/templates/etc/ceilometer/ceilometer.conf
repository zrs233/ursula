[DEFAULT]
debug = {{ ceilometer.logging.debug }}
verbose = {{ ceilometer.logging.verbose }}
log_dir = /var/log/ceilometer
policy_file = /etc/ceilometer/policy.json
rpc_backend = ceilometer.openstack.common.rpc.impl_kombu

[oslo_messaging_rabbit]
{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

{% if rabbitmq.cluster -%}
rabbit_hosts = {{ rabbitmq_hosts() }}
{% else -%}
rabbit_host = {{ endpoints.rabbit }}
rabbit_port = 5672
{% endif -%}
rabbit_userid = {{ rabbitmq.user }}
rabbit_password = {{ secrets.rabbit_password }}

[database]
{% macro ceilometer_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ mongodb.port }}
   {%- else -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ mongodb.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

connection=mongodb://ceilometer:{{ secrets.mongodb_password }}@{{ ceilometer_hosts() }}/ceilometer?replicaSet=mongoreplica
metering_time_to_live={{ ceilometer.purge_frequency }}

# If mongodb_replica_set is set, MongoReplicaSetClient will be used instead of MongoClient
mongodb_replica_set=mongoreplica

[api]
host = 0.0.0.0
port = 8888

[keystone_authtoken]
identity_uri = {{ endpoints.identity_uri }}
auth_uri = {{ endpoints.auth_uri }}
admin_tenant_name = service
admin_user = ceilometer
admin_password = {{ secrets.service_password }}
cafile = {{ ceilometer.cafile }}
signing_dir = /var/cache/ceilometer/api

[clients]
ca_file = {{ ceilometer.cafile }}

[publisher]
# Secret value for signing messages. Set value empty if signing is not required to avoid computational overhead.
telemetry_secret = {{ secrets.telemetry_secret }}

[service_credentials]
os_auth_url = {{ endpoints.auth_uri }}
os_username = ceilometer
os_tenant_name = service
os_password = {{ secrets.service_password }}
os_endpoint_type = internalURL
os_region_name = RegionOne
os_cacert = {{ ceilometer.cafile }}
