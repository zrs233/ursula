---
- name: install dependencies
  apt: pkg=parted
       state=present

- name: write out bootstrap keyring
  copy:
    dest: "{{ hostvars[groups['mons'][0]]['keyrings']['source'] }}"
    content: "{{ hostvars[groups['mons'][0]]['keyrings']['content'] | b64decode }}"

- name: if partition named 'ceph' exists
  shell: "parted --script {{ item }} print | egrep -sq '^ 1.*ceph'"
  with_items: ceph_osd.devices
  changed_when: false
  failed_when: false
  register: ceph_partition

# only do the next four tasks when:
#   1. no ceph partitions were found on the disk OR
#   2. user explicitly chooses to destroy disks

- name: erasing partitions and labels from osd devices
  command: sgdisk --zap {{ item.1 }}
  ignore_errors: true
  with_together:
    - ceph_partition.results
    - ceph_osd.devices
  when: item.0.rc != 0 or
        ceph_osd.destroy_devices_no_matter_what

- name: erasing partitions and labels from journal devices
  command: sgdisk --zap {{ item.1 }}
  ignore_errors: true
  with_together:
    - ceph_partition.results
    - ceph_osd.raw_journal_devices
  when: item.0.rc != 0 or
        ceph_osd.destroy_devices_no_matter_what

- name: clear osd devices
  shell: dd if=/dev/zero of={{ item.1 }} bs=1M count=512
  with_together:
    - ceph_partition.results
    - ceph_osd.devices
  when: item.0.rc != 0 or
        ceph_osd.destroy_devices_no_matter_what

- name: clear journal devices
  shell: dd if=/dev/zero of={{ item.1 }} bs=1M count=512
  with_together:
    - ceph_partition.results
    - ceph_osd.raw_journal_devices
  when: item.0.rc != 0 or
        ceph_osd.destroy_devices_no_matter_what

# only do this when no ceph paritions were found on the disk
- name: prepare osd disk(s)
  command: "ceph-disk prepare {{ item.1 }} {{ item.2 }}"
  with_together:
    - ceph_partition.results
    - ceph_osd.devices
    - ceph_osd.raw_journal_devices
  when:
    item.0.rc != 0

# only do this if no ceph partitions were found on the disk
- name: activate osd(s)
  command: ceph-disk activate {{ item.1 | regex_replace('^(\/dev\/cciss\/c[0-9]{1}d[0-9]{1})$', '\\1p') }}1
  with_together:
    - ceph_partition.results
    - ceph_osd.devices
  when:
    item.0.rc != 0

- name: start and add that the osd service(s) to the init sequence
  service: name=ceph
           state=started
           enabled=yes
