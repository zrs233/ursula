---
- name: install dependencies
  apt: pkg={{ item }}
       state=present
  with_items: ceph_osd.pkgs

- name: detect osd devices
  ceph_disks:

- name: verify devices have been detected
  fail: msg="error in detecting devices"
  when: ssd_devices is not defined

- name: register ceph.keyring
  slurp: src=/var/lib/ceph/bootstrap-osd/ceph.keyring
  register: ceph_keyrings
  run_once: true
  delegate_to: "{{ groups[ceph.monitor_group_name][0] }}"

- name: write ceph.keyring
  copy:
    dest: "{{ ceph_keyrings['source'] }}"
    content: "{{ ceph_keyrings['content'] | b64decode }}"

- name: check if 'ceph' partition exists on osd devices
  shell: "parted --script {{ item }} print | egrep -sq 'ceph'"
  with_items: ssd_devices
  ignore_errors: true
  changed_when: false
  register: ceph_partition_osds

# only do the next tasks when:
# - no ceph partitions were found on the disk

- name: erasing partitions and labels from osd devices
  command: sgdisk --zap {{ item.1 }}
  ignore_errors: true
  with_together:
    - ceph_partition_osds.results
    - ssd_devices
  when: item.0.rc != 0

- name: clear osd devices
  shell: dd if=/dev/zero of={{ item.1 }} bs=1M count=512
  with_together:
    - ceph_partition_osds.results
    - ssd_devices
  when: item.0.rc != 0

# journal_collocation
- name: prepare osd disks
  command: "ceph-disk prepare {{ item.1 }}"
  with_together:
    - ceph_partition_osds.results
    - ssd_devices
  when: item.0.rc != 0

- name: activate osds
  command: ceph-disk activate {{ item.1 }}1
  with_together:
    - ceph_partition_osds.results
    - ssd_devices
  when: item.0.rc != 0

- name: start and add that the osd service(s) to the init sequence
  service: name=ceph
           state=started
           enabled=yes

- name: delete default 'rbd' pool
  command: ceph osd pool delete rbd rbd --yes-i-really-really-mean-it
  register: poolout
  changed_when: poolout.stdout | search('removed')
  run_once: true
  delegate_to: "{{ groups[ceph.monitor_group_name][0] }}"

- name: create openstack pool
  ceph_pool:
    pool_name: "{{ ceph_common.pool_name}}"
  register: pool_output
  run_once: true
  delegate_to: "{{ groups[ceph.monitor_group_name][0] }}"
