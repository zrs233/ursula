---
- name: create heat user
  user: name=heat comment=heat shell=/bin/false system=yes home=/nonexistent
        createhome=no

- name: create heat environment.d directory
  file: dest=/etc/heat/environment.d state=directory

- name: create heat log directory
  file: dest=/var/log/heat state=directory mode=0755 owner=heat

- name: create heat cache dir
  file: dest=/var/cache/heat state=directory mode=0700
        owner=heat group=heat

- name: permit access to heat
  ufw: rule=allow to_port={{ item }} proto=tcp
  with_items:
    - 8001
    - 8005

- name: install heat services
  upstart_service: name={{ item }}
                   user=heat
                   cmd=/usr/local/bin/{{ item }}
                   config_files=/etc/heat/heat.conf
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- name: heat config
  template: src=etc/heat/{{ item }} dest=/etc/heat/{{ item }} mode=0644
  with_items:
    - heat.conf
    - policy.json
    - api-paste.ini
  notify:
    - restart heat services

- name: create heat trusts roles
  keystone_user: role={{ item }}
                 login_user=provider_admin
                 login_password="{{ secrets.provider_admin_password }}"
                 login_tenant_name=admin
  with_items:
    - heat_stack_owner
    - heat_stack_user
  run_once: true

- name: create heat stack admin
  command: heat-keystone-setup-domain --stack-user-domain-name heat --stack-domain-admin heat_domain_admin --stack-domain-admin-password {{ secrets.stack_domain_admin_password }}
  environment:
      OS_USERNAME: provider_admin
      OS_PASSWORD: "{{ secrets.provider_admin_password }}"
      OS_AUTH_URL: "{{ endpoints.auth_uri }}"
      OS_CACERT: /opt/stack/ssl/openstack.crt
  run_once: true

- name: stop heat services before db sync
  service: name={{ item }} state=stopped
  when: database_create.changed or force_sync|default('false')|bool
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine
  tags: db-migrate

- name: sync heat database
  command: heat-manage db_sync
  when: database_create.changed or force_sync|default('false')|bool
  run_once: true
  changed_when: true
  notify:
    - restart heat services
  # we want this to always be changed so that it can notify the service restart
  tags: db-migrate

- name: setup heat domain and user
  shell: . /root/stackrc; heat-keystone-setup-domain "{{ secrets.service_password }}" | grep stack_user_domain_id
  register: heat_domain
  failed_when: false

- name: configure heat for stack domain
  template: src=etc/heat/heat_stack_domain.conf} dest=/etc/heat/heat_stack_domain.conf mode=0644
  when: heat_domain.rc == 0
  notify:
    - restart heat services

- meta: flush_handlers

- name: start heat services
  service: name={{ item }} state=started
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- include: monitoring.yml tags=monitoring,common
  when: monitoring.enabled|default('True')|bool

- include: logging.yml
  tags:
    - logrotate
    - logging
  when: logging.enabled|default('True')|bool
