---
- name: check if keystone user exists
  action: shell getent passwd keystone
  register: keystone_user
  failed_when: False
  changed_when: False

- name: keystone user
  user: name=keystone shell=/bin/false createhome=no
  when: keystone_user|success

- name: keystone user
  user: name=keystone comment=keystone shell=/bin/false system=yes
        home=/nonexistent createhome=no
  when: not keystone_user|success

- name: keystone config dir
  file: dest=/etc/keystone state=directory

- name: keystone log dir
  file: dest=/var/log/keystone state=directory mode=0755 owner=keystone
        group=keystone

- name: install keystone service
  upstart_service: name=keystone user=keystone cmd=/usr/local/bin/keystone-all
                   config_dirs=/etc/keystone

- name: configure keystone
  template: src={{ item }} dest=/etc/keystone/ mode=0644
  with_fileglob: ../templates/etc/keystone/*
  notify:
    - restart keystone services

- name: stop keystone service before db sync
  service: name=keystone state=stopped
  when: database_create.changed or force_sync|default('false')|bool
  tags: db-migrate

- name: sync keystone database
  command: keystone-manage db_sync
  when: database_create.changed or force_sync|default('false')|bool
  run_once: true
  changed_when: true
  notify: restart keystone services
  # we want this to always be changed so that it can notify the service restart
  tags: db-migrate

- meta: flush_handlers

- name: start keystone
  service: name=keystone state=started

- name: permit access to keystone
  ufw: rule=allow to_port={{ item }} proto=tcp
  with_items:
    - "{{ endpoints.keystone.port.haproxy_api }}"
    - "{{ endpoints.keystone_admin.port.haproxy_api }}"

- name: add cron job to clean up expired tokens
  template:
    src: etc/cron.d/drop-expired-keystone-tokens
    dest: /etc/cron.d/drop-expired-keystone-tokens
    owner: root
    group: root
    mode: 0640
  run_once: true

- name: delete old token flush job
  file:
    path: /etc/cron.hourly/drop-expired-keystone-tokens
    state: absent

- include: monitoring.yml tags=monitoring,common
  when: monitoring.enabled|default('True')|bool


- include: logging.yml
  tags:
    - logrotate
    - logging
  when: logging.enabled|default('True')|bool
