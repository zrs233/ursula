[DEFAULT]
debug = {{ nova.logging.debug }}
verbose = {{ nova.logging.verbose }}

osapi_compute_listen_port={{ endpoints.nova.port.backend_api }}

# Policy #
allow_resize_to_same_host = True

# Logging #
use_syslog = False
syslog_log_facility = LOG_LOCAL0

log_dir = /var/log/nova

multi_host=True
send_arp_for_ha=true

enabled_apis = ec2,osapi_compute,metadata

scheduler_default_filters={{ nova.scheduler_default_filters }}

{% if ironic.enabled -%}
scheduler_host_manager=nova.scheduler.ironic_host_manager.IronicHostManager
compute_manager=ironic.nova.compute.manager.ClusteredComputeManager
cpu_allocation_ratio=1.0
ram_allocation_ratio=1.0
{% else -%}
scheduler_host_manager={{ nova.scheduler_host_manager }}
compute_manager={{ nova.compute_manager }}
cpu_allocation_ratio={{ nova.cpu_allocation_ratio }}
ram_allocation_ratio={{ nova.ram_allocation_ratio }}
{% endif -%}

{% if ansible_product_name == 'H8DGU' and ansible_processor_vcpus == 32 and inventory_hostname in groups['controller'] -%}
vcpu_pin_set = "2-15,18-31"
{% elif ansible_product_name == 'H8DGU' and ansible_processor_vcpus == 32 -%}
vcpu_pin_set = "1-31"
{% endif -%}

# Services offered #
s3_host={{ endpoints.main }}
ec2_host={{ endpoints.main }}
ec2_dmz_host={{ endpoints.main }}
ec2_url=http://{{ endpoints.main }}:8773/services/Cloud
cc_host={{ endpoints.main }}
nova_url=http://{{ endpoints.main }}:{{ endpoints.nova.port.backend_api }}/v1.1/

# Paths to important items #
state_path=/var/lib/nova
lock_path=/var/lib/nova
rootwrap_config=/etc/nova/rootwrap.conf
api_paste_config=/etc/nova/api-paste.ini
keys_path=/var/lib/nova/keys

# Auth
use_deprecated_auth=false
auth_strategy=keystone
use_forwarded_for=true
keystone_ec2_url={{ endpoints.keystone.url.public }}/{{ endpoints.keystone.version }}/ec2tokens

# Vnc configuration
novnc_enabled=false
novncproxy_base_url={{ endpoints.novnc.url.internal }}/vnc_auto.html
novncproxy_port={{ endpoints.novnc.port.backend_api }}
vncserver_proxyclient_address={{ primary_ip }}
vncserver_listen={{ primary_ip }}

# Consoleauth tokens in memcached
memcached_servers={{ hostvars|ursula_memcache_hosts(groups, memcached.port) }}

# Networking #
network_api_class=nova.network.neutronv2.api.API
default_floating_pool={{ nova.floating_pool }}
{% if neutron.plugin == 'ml2' %}
linuxnet_interface_driver =
libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtGenericVIFDriver
{% elif neutron.plugin == 'ovs' %}
linuxnet_interface_driver=nova.network.linux_net.LinuxOVSInterfaceDriver
libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver
{% endif %}

# Require Neutron callback to boot instance
vif_plugging_is_fatal = True
vif_plugging_timeout = 300

security_group_api=neutron
firewall_driver=nova.virt.firewall.NoopFirewallDriver

dhcpbridge_flagfile = /etc/nova/nova.conf
dhcpbridge=/usr/local/bin/nova-dhcpbridge

# Set my_ip so that we explicitly define the IP we can be reached
# at by other hypervisors
my_ip = {{ hostvars[inventory_hostname][primary_interface]['ipv4']['address'] }}

# Workers #
osapi_compute_workers={{ nova.api_workers }}
metadata_workers={{ nova.metadata_api_workers }}
ec2_workers={{ nova.ec2_workers }}

# Cinder #
volume_api_class=nova.volume.cinder.API
osapi_volume_listen_port=5900

{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][primary_interface]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

# Rabbit #
{% if rabbitmq.cluster -%}
rabbit_hosts={{ rabbitmq_hosts() }}
{% else -%}
rabbit_host={{ endpoints.rabbit }}
rabbit_port=5672
{% endif -%}
rabbit_userid={{ rabbitmq.user }}
rabbit_password={{ secrets.rabbit_password }}

# Reserved Resources
{% if ironic.enabled -%}
reserved_host_memory_mb=0
{% elif nova.reserved_host_memory_mb is defined %}
reserved_host_memory_mb = {{ nova.reserved_host_memory_mb }}
{% elif inventory_hostname in groups['controller'] and nova.controller_reserve_ram is defined -%}
reserved_host_memory_mb={{ nova.controller_reserve_ram }}
{% elif inventory_hostname in groups['compute'] and nova.compute_reserve_ram is defined -%}
reserved_host_memory_mb={{ nova.compute_reserve_ram }}
{% endif %}
reserved_host_disk_mb = {{ nova.reserved_host_disk_mb }}

# misc #
compute_driver={{ nova.compute_driver }}
resume_guests_state_on_host_boot=true

use_virtio_for_bridges=true

disable_libvirt_livesnapshot=false

preallocate_images = {{ nova.preallocate_images }}

[database]
connection=mysql://nova:{{ secrets.db_password }}@{{ endpoints.db }}/nova?charset=utf8

[libvirt]
virt_type={{ nova.libvirt_type }}
{% if nova.libvirt_cpu_model -%}
cpu_mode = custom
cpu_model = {{ nova.libvirt_cpu_model }}
{% else %}
cpu_mode = host-model
{% endif -%}

# Reserved Resources
{% if ironic.enabled -%}
reserved_host_memory_mb=0
{% elif inventory_hostname in groups['controller'] -%}
reserved_host_memory_mb=4096
{% endif %}

[conductor]
use_local = False
workers = {{ nova.conductor_workers }}

[keystone_authtoken]
identity_uri = {{ endpoints.keystone.url.admin }}
auth_uri = {{ endpoints.keystone.url.internal }}/{{ endpoints.keystone.version }}
admin_tenant_name = service
admin_user = nova
admin_password = {{ secrets.service_password }}
signing_dir = /var/cache/nova/api
cafile = {{ nova.cafile }}

[neutron]
url={{ endpoints.neutron.url.internal }}
auth_strategy=keystone
admin_tenant_name=service
admin_username=neutron
admin_password={{ secrets.service_password }}
admin_auth_url={{ endpoints.keystone.url.admin}}/{{ endpoints.keystone.version }}
ca_certificates_file={{ nova.cafile }}

service_metadata_proxy=true
metadata_proxy_shared_secret={{ secrets.metadata_proxy_shared_secret }}

[glance]
api_servers={{ nova.glance_endpoint }}

[cinder]
catalog_info = volumev2:cinderv2:publicURL
ca_certificates_file = {{ nova.cafile }}

{% if ironic.enabled -%}
[ironic]
admin_username=ironic
admin_password={{ secrets.service_password }}
admin_url={{ endpoints.keystone.url.admin }}/{{ endpoints.keystone.version }}
admin_tenant_name=service
api_endpoint={{ endpoints.ironic.url.internal }}/{{ endpoints.ironic.version }}
{% endif -%}
