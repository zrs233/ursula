- name: Copy templates for password policies
  template: src={{ item }} 
            dest={{ keystone.ldap.config_dir }}/{{ item | basename }}
  with_fileglob: ../templates/password_policy/*
  when: keystone.ldap.password_policy_enabled|bool

- name: Check if ppolicy is part of the schema
  shell: ldapsearch -Y EXTERNAL -H ldapi:/// -s sub -b cn=config objectclass=olcSchemaConfig | grep ppolicy
  register: ppolicy_out
  ignore_errors: yes
  changed_when: False

- name: Add password policy schema
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f  /etc/ldap/schema/ppolicy.ldif
  when: ppolicy_out.stdout.count("ppolicy,") < 1 and
        keystone.ldap.password_policy_enabled|bool

- name: check if policy container is created
  shell: ldapsearch -x -D {{keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} -b {{ keystone.ldap.suffix }} -s sub ou={{ keystone.ldap.password_policy_ou }}
  register: pcont_out
  ignore_errors: yes
  changed_when: False

- name: Create policy container
  shell: ldapadd -x -D {{keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} -f {{ keystone.ldap.config_dir }}/ppolicy_container.ldif
  when: pcont_out.stdout.count("{{ keystone.ldap.password_policy_ou_dn }}") < 1 and
        keystone.ldap.password_policy_enabled|bool

- name: Check if ppolicy module is registered
  shell: ldapsearch -Y EXTERNAL -H ldapi:/// -s sub -b olcDatabase={1}hdb,cn=config objectclass=olcPPolicyConfig
  register: pm_out
  ignore_errors: yes
  changed_when: False

- name: Add password policy module
  shell: ldapadd -Y EXTERNAL -H ldapi:/// -f {{ keystone.ldap.config_dir }}/ppolicy_module.ldif
  when: pm_out.stdout.count(",ou={{ keystone.ldap.password_policy_ou }}") < 1 and
        keystone.ldap.password_policy_enabled|bool

- name: Check if default policy is created
  shell: ldapsearch -x -D {{keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} -b {{ keystone.ldap.password_policy_ou_dn }} -s sub objectClass=pwdPolicy
  register: dpolicy_out
  ignore_errors: yes
  changed_when: False
 
- name: Add default policy
  shell: ldapadd -x -D {{keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} -f {{ keystone.ldap.config_dir }}/password_policy.ldif
  when: keystone.ldap.password_policy_enabled|bool and
        (dpolicy_out.stdout.count("cn={{ keystone.ldap.password_policy_cn }}") < 1)

- name: Delete the policy if policy is changed from enabled to disabled.
  shell: ldapdelete -x -D {{keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} {{ keystone.ldap.password_policy_dn }}
  when: dpolicy_out.stdout.count("cn={{ keystone.ldap.password_policy_cn }}") > 0 and
        keystone.ldap.password_policy_enabled|bool == False
