- name: install build requirements
  apt: name={{ item }} state=installed
  with_items: "{{ keystone.ldap.openldap_dev_pkgs }}"

- name: create a temporary working directory
  command: /bin/mktemp -d
  register: working_dir

- name: get openldap source from remote
  git: repo={{ keystone.ldap.openldap_source_git }} 
       dest={{ working_dir.stdout }}/openldap 
       accept_hostkey=True
  ignore_errors: True
  when: keystone.ldap.build_check_password_from_source == True
  register: get_openldap_src_remote

- name: get openldap source from local if remote fails
  copy: src=openldap
        dest={{ working_dir.stdout }}/openldap
  when: get_openldap_src_remote|failed and keystone.ldap.build_check_password_from_source == True

- name: get check_password source from remote
  subversion: repo={{ keystone.ldap.check_password_source_svn }} 
              dest={{ working_dir.stdout }}/check_password
  ignore_errors: True
  when: keystone.ldap.build_check_password_from_source == True
  register: get_check_passwd_src_remote

- name: get check_password source from local if remote fails
  copy: src=check_password/trunk 
        dest={{ working_dir.stdout }}/check_password
  when: get_check_passwd_src_remote|failed and keystone.ldap.build_check_password_from_source == True

- name: build openldap headers
  shell: ./configure && make chdir={{ working_dir.stdout }}/openldap
  when: keystone.ldap.build_check_password_from_source == True

- name: build check_password extension
  shell: make install CONFIG="/etc/openldap/check_password.conf" LDAP_INC="-I{{ working_dir.stdout }}/openldap/include/ -I{{ working_dir.stdout }}/openldap/servers/slapd" CRACKLIB='' CRACKLIB_OPT='' CRACKLIB_LIB='' LIBDIR='/usr/lib/ldap' chdir={{ working_dir.stdout }}/check_password/trunk
  when: keystone.ldap.build_check_password_from_source == True

- name: copy pre-built check_password library
  copy: src=check_password/check_password.so
        dest=/usr/lib/ldap
  when: keystone.ldap.build_check_password_from_source == False

- name: create check_password config ldif
  copy: src=check_password/addPasswdConfig.ldif 
        dest={{ working_dir.stdout }}/addPasswdConfig.ldif

- name: check if check_password is already configured in ldap
  shell: ldapsearch -D {{ keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} -b cn=default,ou=policies,ou=openstack,dc=example,dc=org pwdCheckModule | grep "check_password.so"
  register: check_password_configured
  ignore_errors: True

- name: add check_password ldif into ldap
  command: /usr/bin/ldapmodify -x -D {{ keystone.ldap.root_dn }} -w {{ keystone.ldap.root_password }} -f {{ working_dir.stdout }}/addPasswdConfig.ldif
  when: check_password_configured|failed

- name: create check_password config directory
  file: path=/etc/openldap 
        state=directory

- name: create check_password config
  copy: src=check_password/check_password.conf 
        dest=/etc/openldap/check_password.conf

